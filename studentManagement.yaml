openapi: 3.0.0
info:
  title: School Management API
  description: API for managing school
  version: 1.0.0
servers:
  - url: http://school-management.com
paths:
  /students:
    get:
      tags:
        - Student
      summary: Get all students inside the school
      operationId: showAllStudent
      responses:
        "200":
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
    put:
      tags:
        - Student
      summary: Create or update a student
      description: Create a new student or update an existing one based on the provided ID.
      operationId: createOrUpdateStudent
      requestBody:
        description: Student object that needs to be created or updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "201":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: Invalid input
  /students/{studentId}:
    delete:
      tags:
        - Student
      summary: Delete a student by ID
      operationId: deleteStudent
      parameters:
        - name: studentId
          in: path
          required: true
          description: ID of the student to delete
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Student deleted successfully, no content returned
        "400":
          description: StudentId not found
  /courses:
    get:
      tags:
        - Courses
      summary: Retrieve all courses
      responses:
        "200":
          description: A list of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
    put:
      tags:
        - Courses
      summary:  Create or update a new course 
      operationId: createOrUpdateCourse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "200":
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "201":
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: Invalid input
  /courses/{courseId}:
    delete:
      tags:
        - Courses
      summary: Delete a course by ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Course deleted successfully
  /groups:
    get:
      tags:
        - groups
      summary: Get all groups inside the school
      operationId: showAllgroups
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/groups"
    put:
      tags:
        - groups
      summary: Create or update a groups
      description: Create a new groups or update an existing one based on the provided ID.
      operationId: createOrUpdategroups
      requestBody:
        description: groups object that needs to be created or updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/groups"
        required: true
      responses:
        "200":
          description: groups updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groups"
        "201":
          description: groups created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groups"
        "400":
          description: Invalid input
  /groups/{groupId}:
    delete:
      tags:
        - Groups
      summary: Delete a groups by ID
      operationId: deletegroups
      parameters:
        - name: groupId
          in: path
          required: true
          description: ID of the groups to delete
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: groups deleted successfully, no content returned
        "400":
          description: groupsId not found
components:
  schemas:
    Student:
      type: object
      properties:
        studentId:
          type: integer
        lastName:
          type: string
        firstName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        studentEmail:
          type: string
        enrollmentDate:
          type: string
          format: date-time
        group:
          type: string
          enum:
            - L1
            - L2
            - L3
        sex:
          type: string
          enum:
            - M
            - F
    Course:
      type: object
      properties:
        courseId:
          type: integer
        courseName:
          type: string
    groups:
      type: object
      properties:
        groupId:
          type: integer
        groupName:
          type: string
        groupYear:
          type: string
          format: date-time
        groupsEmail:
          type: string
        enrollmentDate:
          type: string
          format: date-time
        promotion:
          type: string
          enum:
            - G
            - H
            - J
            - K
        studentNb:
          type: integer
        students:
          type: object
          items:
            $ref: "#/components/schemas/Student"